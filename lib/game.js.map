{"version":3,"sources":["../src/init.js","../src/main.js","../src/stuff/camera.js","../src/stuff/chat.js","../src/stuff/debug.js","../src/stuff/drawer.js","../src/stuff/fetcher.js","../src/stuff/interact.js","../src/stuff/net/websock.js","../src/stuff/player.js","../src/stuff/tiles.js","../src/stuff/toolkit/elements.js"],"names":[],"mappings":"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","file":"game.js","sourcesContent":["// ================================================\n// Init Game Object\n// ------------------------------------------------\nvar game = {\n\n    // Fetcher is used for downloading map data.\n    fetcher: {},\n\n    // Atlas: the source image for the visual tiles\n    Atlas: {},\n\n    // LogicalMap: contains data for types of tile.\n    LogicalMap: {},\n\n    // Magic Variables\n    TILE_SIZE: 64,\n    BLOCK_SIZE: 960,\n\n    // Holds class definitions\n    classes: {\n        net: {},\n    },\n\n    // toolkit holds helper functions\n    toolkit: {},\n\n    // Global Enum Values.\n    enums: {\n        GROUND_LAYER: 0,\n        ABOVE_LAYER: 1,\n    },\n\n    // Default Player Username\n    MY_USER: \"user\" + (new Date()).getTime().toString().slice(-7, -2)\n\n}\n\nvar ws\n\nconsole.log(\"init done\")\n","// ================================================\n// Main\n// ------------------------------------------------\ngame.main = (event)=>{\n\n    // Call the init() function on each of the libraries.\n    // Display to console for debugging.\n\n    let LibList = ['net', 'player', 'camera', 'drawer', 'debug', 'interact']\n\n    for (let lib of LibList) {\n        game[lib].init()\n        // console.log(`$ game.${lib}`, game[lib])\n    }\n\n    game.drawer.DrawMap()\n    // console.log(\"$ game \\n\", game)\n    \n    game.net.ws.conn.addEventListener('open', ()=>{    \n        ws('add', game.MY_USER)\n        ws('move', game.MY_USER, 2, 8)\n        ws('list')\n    })\n}\n\n// Start the Fetcher When the Page has loaded.\n// The fetcher will call game.main() when the maps have \n// been fetched, and the images have been loaded.\nwindow.addEventListener(\"load\", ()=>{\n    console.log(\"window loaded\")\n    game.fetcher.FetchMap(game.fetcher.DEFAULT)\n}\n);\n\n// This should be the last .js file to be listed in the html,\n// which means it should be the last one to load.\n// Check that all definitions have been loaded:\n\n// console.log(\"$ game.classes \\n\", game.classes)\n","// ================================================\n// Camera\n// ------------------------------------------------\n\n/*\nThe camera will remain seperate from the player's position.  In this\nversion of the game, the camera is actually determined by the player's\nposition, but that will be kept seperate from the class definitions.\n\nThe Camera determines the tiles that are visible at any given point\nin time, and generates iterators for use by the Renderer.\n*/\n{\n    // The tile where the camera is centered.\n    //     let position = {\n    //         x: 10,\n    //         y: 10\n    //     }\n\n    // The radius (in tiles) around which everything is visible.\n    // NOTE: For now, this will not be a circle radius, and instead\n    // will be the the side length of a square.\n    //     let VIEW_RADIUS = 10\n\n    // The TileLocation of the Tile that is currently at square (0,0).\n    // This can be negative if the camera is near the edge of the map.\n    let FirstTile = {\n        x: 0,\n        y: 0\n    }\n\n    function setFirstTile(X, Y) {\n        FirstTile = {\n            x: X,\n            y: Y,\n        }\n    }\n\n    // Scrollable Viewport Element\n    // The element that can actually be manipulated using the \n    // scrollTo command.  Originally, this was just the window,\n    // but as the HTML structure changes, this element might change.\n    let ScrollableViewport = document.querySelector('#GameViewport')\n\n    // Rectangle Bounds. camera position.\n    //     function UpdateBounds() {\n    //         this.x0 = position.x - VIEW_RADIUS\n    //         this.xf = position.x + VIEW_RADIUS\n    //         this.y0 = position.y - VIEW_RADIUS\n    //         this.yf = position.y + VIEW_RADIUS\n    //     }\n\n    // VisibleTiles Generates an Iterator of TileLocations.\n    // Later on, this function will accept parameters that define the\n    // shape of the visual area (for example, a Circle instead of a Rectangle).\n    //     function *VisibleTiles() {\n    //         for (let x = this.x0; x < this.xf; x++) {\n    //             for (let y = this.y0; y < this.yf; y++) {\n    //                 yield({\n    //                     x,\n    //                     y\n    //                 })\n    //             }\n    //         }\n    //     }\n\n    // Scrolls such that the absolute center tile is displayed in the center \n    // of the screen.\n    function center() {\n        let w = ScrollableViewport.innerWidth\n        let h = ScrollableViewport.innerHeight\n        let x = game.BLOCK_SIZE * 3 / 2 - w / 2\n        let y = game.BLOCK_SIZE * 3 / 2 - h / 2\n        ScrollableViewport.scrollTo(x, y)\n    }\n\n    // Scrolls such that the specified tile becomes visible\n    // at the center of the screen.\n    function scrollToTile(a, b) {\n        let w = ScrollableViewport.clientWidth\n        let h = ScrollableViewport.clientHeight\n        let x = (a - FirstTile.x) * game.TILE_SIZE - w / 2\n        let y = (b - FirstTile.y) * game.TILE_SIZE - h / 2\n        ScrollableViewport.scrollTo(x, y)\n    }\n\n    // getTileCenterCoords returns the pixel location of the center \n    // of the specified tile.\n    function getTileCenterCoords(a, b) {\n        return {\n            x: (a - FirstTile.x + 0.5) * game.TILE_SIZE,\n            y: (b - FirstTile.y + 0.5) * game.TILE_SIZE,\n        }\n    }\n\n    // returns the upper-left corner of a tile, which is useful for\n    // setting styles like \"top\" and \"left\"\n    function getTileTopLeft(a, b) {\n        return {\n            left: (a - FirstTile.x) * game.TILE_SIZE,\n            top: (b - FirstTile.y) * game.TILE_SIZE,\n        }\n    }\n\n    function init() {\n    }\n\n    game.camera = {\n        init,\n        FirstTile,\n        setFirstTile,\n        scrollToTile,\n        getTileCenterCoords,\n        getTileTopLeft,\n        ScrollableViewport,\n    }\n}\n","// ================================================\n// In-game Chat\n// -----------------------------------------------\n\n// document.styleSheets[0].cssRules[0]\n\n{\n    // stores the mapping of (username -> chatmessage)\n    let _chatmap = new Map()\n\n    // Creates a new chatbox. It's message can be changed later.\n    class ChatBox {\n        constructor() {\n            // the div element that holds the text.\n            this.element = game.toolkit.MakeElement('div', {\n                class: \"chatbox\",\n            }, '#WrapChat')\n\n            // duration is the amount of time before the chat\n            // message gets cleared.\n            this.duration = 10000\n\n            // Start off the chat timebomb (which clears the chat)\n            this.timebomb()\n        }\n\n        // setPos places the div element containing the text at a location\n        // that keeps the text centered at that tile.\n        setPos(tx, ty) {\n            let {x, y} = game.camera.getTileCenterCoords(tx, ty)\n            //x += game.TILE_SIZE / 2\n            y -= game.TILE_SIZE / 2\n            this.element.style.top = `calc(${y}px - 1em`\n            this.element.style.left = `calc(${x}px - 33ch)`\n        }\n\n        setText(text) {\n            this.element.textContent = text\n        }\n\n        // doMessage is called by the chat message handler and adds\n        // a timer to the text.  It clears previous timers, to prevent \n        // multiple timers from existing at the same time.\n        doMessage(text) {\n            this.setText(text)\n            window.clearTimeout(this.timer)\n            this.timebomb()\n        }\n\n        // Timebomb creates a new timer that will clear the chat \n        // after some pre-specfied amount of time.\n        timebomb() {\n            this.timer = window.setTimeout(()=>{\n                this.clear()\n            }\n            , this.duration)\n        }\n\n        remove() {\n            this.element.remove()\n        }\n\n        clear() {\n            this.element.textContent = \"\"\n        }\n\n    }\n\n    function lolz() {\n        let examples = ['omg, wat.', 'hello there!', 'why am I a red square?', 'hey, you look like me!', \"what's going on here?\"]\n        let l = []\n        let i = 0\n        for (let name of game.player.list.keys()) {\n            i++\n            if (i < examples.length) {\n                ws('chat', name, examples[i])\n            }\n            l.push(name)\n        }\n        return l\n    }\n\n    game.chat = {\n        ChatBox,\n        lolz\n    }\n}\n","// ================================================\n// Canvas Debugging Tools\n// ------------------------------------------------\n\ngame.debug = {\n\n    init() {},\n\n    // Draws an outine around the tile that is closest to the middle.  The\n    // location of the middle of each tile is used in the calculation.  Works\n    // for Square Tiles where TilSize is the length of a side.\n    OutlineMiddleTile(Canvas, TileSize) {\n        let w = Canvas.width\n        let h = Canvas.height\n        let x = (w / 2) - ((w / 2) % TileSize)\n        let y = (h / 2) - ((h / 2) % TileSize)\n\n        let ctx = Canvas.getContext('2d')\n        let saved = ctx.fillStyle\n        ctx.fillStyle = 'rgba(255, 0, 0, 0.4)'\n        ctx.strokeRect(x, y, TileSize - 1, TileSize - 1)\n        ctx.fillRect(x, y, TileSize - 1, TileSize - 1)\n        ctx.fillStyle = saved\n    }\n}\n","// ================================================\n// Drawer  \n// ------------------------------------------------\n\n// {\n//   it's the kind of drawer that draws,\n//    but since it's pretty much a variable,\n//    you can also put things in it.  \n//\n//     So I guess it's a drawer filled with \n//      shelves of drawing functions.\n// }\n\n// TODO: Rename/Move this file to game.graphics.mapblock\n\n{\n    // rows of mapblocks in visual map\n    const NUM_ROWS = 3\n\n    // columns of mapblocks in visual map.\n    const NUM_COLS = 3\n\n    // layers per mapblock \n    const NUM_LAYERS = 2\n\n    // Create a blocklist, which holds all of the mapblocks.\n    // add references to the relevent canvases,\n    // and calculate the tiles they hold.\n    let blocklist = []\n\n    // The element that holds the map-related canvases \n    const WRAP = document.querySelector(`#VisualMap`)\n\n    // Calculate the side length of a MapBlock, in units of TILES.\n    let TILES_PER_BLOCK = Math.floor(game.BLOCK_SIZE / game.TILE_SIZE)\n\n    function init() {\n\n        // Width and Height of the mapblock will be the same,\n        // since the MapBlocks are squares. \n        let tw = TILES_PER_BLOCK\n        let th = TILES_PER_BLOCK\n\n        for (let row = 0; row < NUM_ROWS; row++) {\n            for (let col = 0; col < NUM_COLS; col++) {\n\n                // The starting positions are defined in a special way \n                // because of the placement of the blocks (3 columns).\n                // this will change when the positioning changes. \n                let tx0 = col * TILES_PER_BLOCK\n                let ty0 = row * TILES_PER_BLOCK\n\n                // Add the canvas list (each of the layers).\n                let canvasList = []\n\n                // Get the div element that holds the canvases\n                let blockElement = WRAP.children[row].children[col]\n\n                // Iterate through the layers to retrieve the canvas elements.\n                for (let layer = 0; layer < NUM_LAYERS; layer++) {\n                    canvasList.push(blockElement.children[layer])\n                }\n\n                // Create the MapBlock object.\n                let block = new game.classes.MapBlock(canvasList,tx0,ty0,tw,th)\n\n                // TODO: replace blocklist with GridOfMapBlocks\n                //\n                // add it to the blocklist. \n                blocklist.push(block)\n\n                // Add the MapBlock to the GridOfMapBlocks\n                game.drawer.GridOfMapBlocks.Add(row,col,block)\n            }\n        }\n    }\n\n    // Retrieves the MapBlock element based on the position.\n    function GetMapBlockElement(col, row) {\n        let ROW = WRAP.getElementsByClassName('row')[row]\n        return ROW.getElementsByClassName('block')[col]\n    }\n\n    // DrawMap() is called by the fetcher!\n    // TODO: split data, For each BLOCK, draw that portion of the map.\n    function DrawMap() {\n        for (let mapblock of blocklist) {\n            mapblock.FullDraw()\n        }\n    }\n\n    // calc Next First Tile is a helper function to determine what\n    // the new \"FirstTile\" of the visual screen is 'logically'.\n    // \n    // factorX, factorY should be -1, 0, or 1\n    //\n    // In the future, this can become more sophisicated, and include\n    // things like checks for world boundary limits.\n    //\n    function calcNextFirstTile(factorX, factorY) {\n        let {x: X, y: Y} = game.camera.FirstTile\n        X += factorX * TILES_PER_BLOCK\n        Y += factorY * TILES_PER_BLOCK\n        return {\n            X,\n            Y\n        }\n    }\n\n    // This is basically just an extention of the calcNextFirstTile\n    // function, but it actually changes the FirstTile.\n    function updateFirstTileByFactor(factorX, factorY) {\n        let {X, Y} = calcNextFirstTile(factorX, factorY)\n        game.camera.setFirstTile(X, Y)\n    }\n\n    function ShiftDown() {\n\n        // scroll to keep the same tile in view.\n        let v = document.querySelector('#GameViewport')\n        savedView = v.scrollTop\n\n        // move the DOM elements around.\n        row0 = WRAP.getElementsByClassName('row')[0]\n        WRAP.appendChild(row0)\n\n        // update the camera variables\n        updateFirstTileByFactor(0, 1)\n\n        // Redraw players and stuff.\n        game.player.DrawAll()\n\n        // Swap the logical mapblocks,\n        // Calculate the new position of the first tile in each block. \n        // Redefine the mapblock and redraw it.\n        //\n        let arr = game.drawer.GridOfMapBlocks.ShiftDown()\n        let newY = 2*TILES_PER_BLOCK + game.camera.FirstTile.y\n        for (i of arr.keys()) {\n            arr[i].RedefineAndDraw(arr[i].tx0, newY)\n        }\n        console.log(game.drawer.GridOfMapBlocks)\n        v.scrollTop = savedView - game.BLOCK_SIZE\n\n    }\n\n    function ShiftUp() {\n        calcNextFirstTile(0, -1)\n    }\n\n    function ShiftLeft() {\n        calcNextFirstTile(-1, 0)\n\n    }\n\n    function ShiftRight() {\n        calcNextFirstTile(1, 0)\n    }\n\n    game.drawer = {\n        init,\n        blocklist,\n        DrawMap,\n        GetMapBlockElement,\n        ShiftDown,\n        ShiftUp,\n        ShiftLeft,\n        ShiftRight,\n        TILES_PER_BLOCK,\n    }\n}\n\n// ================================================\n// Class MapBlock  \n// ------------------------------------------------\n{\n    // The MapBlock class will be added to game.defs, but will mainly be\n    // used by the game.drawer and game.camera functions.\n    class MapBlock {\n        constructor(canvasList, tx0, ty0, tw, th) {\n\n            // The canvas list is an array of canvas elements, each one of them\n            // refers to the same area of visual space, at different layers.\n            // the 0th entry in this array is the ground: the first to be drawn.\n            this.canvasList = canvasList\n            this.ctxList = []\n\n            // keep references to each MapBlock's canvas.\n            for (let canvas of canvasList) {\n                this.ctxList.push(canvas.getContext('2d'))\n            }\n\n            // the rectangle defines the portion of the overall map.\n            // the mapblock is like a chunk of that map, and its bounds are\n            // defined using a rectangle.\n            // (the unit is tiles)\n            this.tx0 = tx0\n            this.ty0 = ty0\n            this.tw = tw\n            this.th = th\n            this.txf = tx0 + tw\n            this.tyf = ty0 + th\n        }\n\n        Clear() {\n            for (let i of this.canvasList.keys()) {\n                let c = this.canvasList[i]\n                let ctx = this.ctxList[i]\n                ctx.clearRect(0, 0, c.width, c.height)\n            }\n        }\n\n        FullDraw() {\n            this.DrawLayer(game.enums.GROUND_LAYER)\n            this.DrawLayer(game.enums.ABOVE_LAYER)\n        }\n\n        DrawLayer(layer) {\n            for (let row = 0; row < this.th; row++) {\n                for (let col = 0; col < this.tw; col++) {\n                    let tx = this.tx0 + col\n                    let ty = this.ty0 + row\n                    let px = col * game.TILE_SIZE\n                    let py = row * game.TILE_SIZE\n                    let tile = game.GetMapTile(tx, ty)\n                    if (tile !== undefined) {\n                        tile.draw(this.ctxList[layer], layer, px, py)\n                    }\n                }\n            }\n        }\n\n        // RedefineAndDraw assigns new bounds to the MapBlock, clears it,\n        // then redraws it. This is primarily used when using one of the \n        // Shift functions.\n        //\n        // X and Y refer to the first logical tile within the MapBlock.\n        // Everything else will be updated accordingly.\n        RedefineAndDraw(X, Y) {\n            this.tx0 = X\n            this.ty0 = Y\n            this.txf = this.tx0 + this.tw\n            this.tyf = this.ty0 + this.th\n            this.Clear()\n            this.FullDraw()\n        }\n    }\n    game.classes.MapBlock = MapBlock\n}\n\n// ================================================\n// GridOfMapBlocks  \n// ------------------------------------------------\n\n{\n    // GridOfMapBlocks is a 2-d array of MapBlock objects.\n    // The configuration of this grid should match the visual one\n    // in the DOM. \n\n    let m = new Array(3)\n    for (let row = 0; row < 3; row++) {\n        m[row] = new Array(3)\n    }\n\n    function Add(A, B, thing) {\n        m[A][B] = thing \n    }\n\n    function SwapRows(A, B) {\n        let saved = m[A]\n        m[A] = m[B]\n        m[B] = saved\n    }\n\n    function SwapCols(A, B) {\n        for (let row of m.keys()) {\n            let saved = m[row][A]\n            m[row][A] = m[row][B]\n            m[row][B] = saved\n        }\n    }\n\n    // Returns an array of the  in the column.\n    function GetCol(A) {\n        let out = []\n        for (let row of m.keys()) {\n            out.push(m[row][A])\n        }\n        return out\n    }\n\n    function GetRow(A) {\n        return m[A]\n    }\n\n    // The Shift functions will move the rows & columsn around,\n    // and return a list of the elements that were \n    // 'shifted off the edge'.\n    // \n    // Basically, you want to redraw each of those mapblocks,\n    // and can do so using a for-of loop.\n    //\n\n    function ShiftDown() {\n        SwapRows(0, 2)\n        SwapRows(0, 1)\n        return m[2]\n    }\n\n    function ShiftUp() {\n        SwapRows(0, 2)\n        SwapRows(0, 1)\n        return m[0]\n    }\n\n    function ShiftLeft() {\n        SwapCols(0, 2)\n        SwapCols(0, 1)\n        return GetCol(0)\n    }\n\n    function ShiftRight() {\n        SwapCols(0, 2)\n        SwapCols(1, 2)\n        return GetCol(2)\n    }\n\n    game.drawer.GridOfMapBlocks = {\n        m,\n        Add,\n        ShiftDown,\n        ShiftUp,\n        ShiftLeft,\n        ShiftRight,\n        GetRow,\n        GetCol,\n    }\n}\n","// ================================================\n// Fetcher: Downloading Map Data\n// ------------------------------------------------\n\n// Default Locations for fetching the Map Data.\ngame.fetcher = {\n\n    // Keeps track of the initial map fetch.\n    FIRST_DONE: false,\n\n    // URLs of various different experimental maps.\n    JSON_URLS: {\n        1: \"json/example.json\",\n        2: \"tools/ex.json\",\n        3: \"tools/hundred.json\",\n    },\n\n    // The Default map to load for FetchMap() \n    DEFAULT: window.location.href + \"tools/hundred.json\",\n\n    // TODO: return a Promise that the image will load,\n    //       then do a .then(DrawMap())\n    //\n    FetchMap(map_url) {\n        console.log(`Fetching map from: ${map_url}`)\n        fetch(map_url).then((response)=>{\n            return response.json()\n        }\n        ).then((myJson)=>{\n            this.handleJson(myJson)\n        }\n        ).catch(error=>{\n            console.error('Fetch Error:', error)\n        }\n        )\n    },\n\n    // handleJson basically just saves the json data into memory.\n    handleJson(myJson) {\n        console.log(\"FetchMap Completed:\", myJson)\n\n        // add the JSON data to the game.\n        game.Atlas = myJson.Atlas\n        game.LogicalMap = myJson.Map\n\n        // Prepare the TileMatrix\n        this.MakeMapIntoTileMatrix()\n\n        // Fetch and Load the image for the atlas.\n        this.FetchAtlasImage(game.Atlas.ImagePath)\n\n    },\n\n    FetchAtlasImage(path) {\n\n        // TODO: make json into relative paths.\n        path = window.location + \"img/tiles.png\"\n\n        console.log(`Fetching image from: ${path}`)\n\n        // Once the image has been fetched and loaded, the map can be drawn.\n        game.AtlasImage = new Image()\n        game.AtlasImage.src = \"img/tiles.png\"\n        game.AtlasImage.addEventListener('load', this.TriggerDraw, false)\n\n    },\n\n    TriggerDraw() {\n        // If this is not the initial fetch, just draw the map.\n        if (this.FIRST_DONE === true) {\n            game.drawer.DrawMap()\n            return\n        }\n        // Call the \"main\" function if this is the first fetch.\n        this.FIRST_DONE = true\n        console.log(`Image Fetch Done:`, game.AtlasImage)\n        game.main()\n    },\n\n    MakeMapIntoTileMatrix() {\n\n        // Create a matrix of Tiles, based on the LogicalMap of values.\n        // Basically, converts the values into Tile objects that can be used later.\n        let h = game.LogicalMap.Height\n        let w = game.LogicalMap.Width\n\n        // Create an empty (w x h) matrix.\n        let matrix = new Array(h)\n        for (let i of matrix.keys()) {\n            matrix[i] = new Array(w)\n        }\n\n        for (let row = 0; row < h; row++) {\n            for (let col = 0; col < w; col++) {\n\n                // Create the Tile.\n                let t = new game.classes.Tile(col,row)\n\n                // Assign layer information\n                // TODO!!\n                // Change the JSON format, then change this!\n                t.layers[game.enums.GROUND_LAYER] = game.LogicalMap.Data[0][row][col]\n                t.layers[game.enums.ABOVE_LAYER] = game.LogicalMap.Data[1][row][col]\n\n                // Save the tile into the TileMatrix.\n                matrix[row][col] = t\n\n            }\n        }\n        // Save the filled matrix into an accessible location.\n        game.TileMatrix = matrix\n        // Helper function for retrieving map tiles.\n        game.GetMapTile = (tx,ty)=>{\n            if ((tx >= w) || (ty >= h)) {\n                return undefined\n            }\n            return game.TileMatrix[ty][tx]\n        }\n    },\n\n}\n","// ================================================\n// User Interactions and Event Handlers\n// ------------------------------------------------\n{\n    // The overlay canvas is what the user actually clicks on.\n    // Keep this as a variable, because the specific canvas\n    // element may change in the future.\n    let overlay = document.querySelector('#Overlay')\n\n    // The clickbox is a fancy extra box that it used to show you\n    // that you have clicked on a tile.\n    let clickbox = document.querySelector('#myclickbox')\n\n    function init() {\n        overlay.addEventListener('click', handleClickEvent)\n    }\n\n    function handleClickEvent(event) {\n\n        // Get the clicked (x,y) relative to the canvas element.        \n        let r = overlay.getBoundingClientRect();\n        let x = event.clientX - r.left\n        let y = event.clientY - r.top\n\n        // offset pixel position of target tile's upper-left corner.\n        // used for adding the target canvas.\n        //\n        // TODO: this should just update targetbox location and redraw it.\n        //\n        {\n            let left = x - (x % game.TILE_SIZE)\n            let top = y - (y % game.TILE_SIZE)\n            clickbox.style.top = top + 'px'\n            clickbox.style.left = left + 'px'\n        }\n        // The Tile(x,y) relative to the first tile on the board.\n        let OffsetTileX = Math.floor(x / game.TILE_SIZE)\n        let OffsetTileY = Math.floor(y / game.TILE_SIZE)\n\n        // Calculate the actual tile.\n        let outx = game.camera.FirstTile.x + OffsetTileX\n        let outy = game.camera.FirstTile.y + OffsetTileY\n\n        ws('move', game.MY_USER, outx, outy)\n        // Debug Message\n        // console.log(`you clicked on tile (${outx}, ${outy})`)\n    }\n\n    game.interact = {\n        init,\n        overlay,\n        handleClickEvent,\n        clickbox,\n    }\n}\n","// ================================================\n// Websockets \n// ------------------------------------------------\n\n{\n    class WebSocketHub {\n        constructor(address) {\n            this.conn = new WebSocket(address);\n            this.conn.onopen = WebSocketHub.DefaultHandleOpen\n            this.conn.onclose = WebSocketHub.DefaultHandleClose;\n            this.conn.onmessage = WebSocketHub.DefaultHandleMessage;\n            this.uid = 123\n        }\n\n        static DefaultHandleOpen(evt) {\n            console.log(`Connection Opened: ${evt.currentTarget.url}`)\n        }\n\n        static DefaultHandleClose(evt) {\n            console.log(`Connection Closed: ${evt.currentTarget.url}`)\n        }\n\n        static DefaultHandleMessage(evt) {\n            let messages = evt.data.split('\\n');\n            for (let i = 0; i < messages.length; i++) {\n                WebSocketHub.HandleJSONMessage(messages[i])\n            }\n        }\n\n        static HandleJSONMessage(IncomingMessage) {\n            let msg = JSON.parse(IncomingMessage)\n            // msg.TIME = new Date(msg.time).toTimeString()\n            // console.log(msg)\n            game.net.HandleMessage(msg)\n        }\n\n        nextId() {\n            this.uid = this.uid + 1\n            let copy = this.uid\n            return copy\n        }\n\n        send(MessageString, ...params) {\n            // Increment the id counter so we can match up the message.\n            // let id = this.nextId()\n\n            // Convert the parameters into an array\n            let Parameters = []\n            for (let p of params) {\n                Parameters.push(p)\n            }\n\n            // Convert into a JSON message, according to the server APIs.\n            let msg = JSON.stringify({\n                // id: id,\n                method: MessageString,\n                params: Parameters,\n                //time: (new Date()).getTime(),\n            });\n\n            // Send the JSON message across the websocket.\n            this.conn.send(msg);\n            return\n        }\n    }\n    game.classes.net.WebSocketHub = WebSocketHub\n\n    // Set the Alias variable 'ws' to it function.\n    ws = (string,...params)=>game.net.ws.send(string, ...params)\n    var wsreset = function() {\n        game.net.ws.conn.addEventListener('close', function() {\n            game.net.StartLocal()\n        })\n        game.net.ws.conn.close()\n    }\n\n}\n\n// ================================================\n// game.net\n// ------------------------------------------------\n\n{\n    game.net = {\n        init() {\n            this.ws = this.ConnectTo(this.DEFAULT_SERVER)\n        },\n\n        // Canonical URL of the game websocket server.\n        DEFAULT_SERVER: new URL('wss://thebachend.com/ws/echo'),\n\n        // Creates a new WebSocketHub using the specified address.\n        ConnectTo(address) {\n            if (window[\"WebSocket\"]) {\n                return new game.classes.net.WebSocketHub(address)\n            } else {\n                throw new Error(`Cannot connect to Websocket at ${address}`)\n            }\n        },\n\n        // NOTE! DEFAULT_LOCAL_SERVER definition is a kludge.\n        // If you don't know what this is doing: remove it. \n        DEFAULT_LOCAL_SERVER: new URL(`ws://${window.location.hostname}:8090/ws/echo`),\n\n        StartLocal() {\n            this.ws = this.ConnectTo(this.DEFAULT_LOCAL_SERVER)\n            game.net.ws.conn.addEventListener('open', function() {\n                ws('add', game.MY_USER)\n                ws('move', game.MY_USER, 2, 8)\n                ws('list')\n            })\n            return this.ws\n        },\n\n    }\n}\n\n// ================================================\n// game.net.HandleMessage\n// ------------------------------------------------\n{\n    // function mapping:  (message.kind) -> (function(message))\n    let funcMap = {\n        'playerlist': handlePlayerList,\n        'UpdateTargets': handleUpdateTargets,\n        'chat': handleChat,\n    }\n\n    // Lookup the function to execute based on the message kind.\n    function HandleIncomingMessage(message) {\n        if (message.kind === undefined) {\n            return\n        }\n        let f = funcMap[message.kind]\n        if (typeof (f) !== 'function') {\n            throw new Error(`message kind not implemented: ${message.kind}`)\n        }\n        f(message)\n    }\n\n    function handlePlayerList(message) {\n        game.player.UpdateList(message.result)\n\n    }\n\n    function handleUpdateTargets(message) {\n        for (let[name,pos] of Object.entries(message.result)) {\n            game.player.list2[name].TargetPos = pos\n        }\n    }\n\n    function handleChat(message) {\n        console.log(message)\n        let {User, Message} = message.result\n\n        // use setText for lasting messages (until you logout).\n        game.player.list.get(User).chatbox.setText(Message)\n\n        // use doMessage for self-clearing messages.\n        // game.player.list.get(User).chatbox.doMessage(Message)\n    }\n\n    game.net.HandleMessage = HandleIncomingMessage\n}\n\n// ================================================\n// Sending chat messages with Chat Form.\n// ------------------------------------------------\n{\n    let chatbar = document.querySelector('#ChatBar')\n    let chatform = document.querySelector('#ChatInputForm')\n\n    function submitChat(event) {\n        if (!chatbar.value) {\n            return false\n        }\n        if (!game.net.ws.conn) {\n            return false\n        }\n        ws('chat', game.MY_USER, chatbar.value)\n        chatbar.value = \"\"\n        chatbar.blur()\n        return false\n    }\n\n    chatform.onsubmit = submitChat\n}\n","// ================================================\n// game.player \n// ------------------------------------------------\n\n{\n    function init() {\n        // game.player.list is the client's local playerlist.\n        this.list = new Map()\n\n        // activeset is used to detect when players have left the area.\n        // when a FullPlayerList message is received, this activelist\n        // gets filled with the player names.  Then, Refresh() is called\n        // to remove any players that aren't in this activelist.\n        this.active = new Set()\n\n        this.me = function() {\n            return game.player.list.get(game.MY_USER)\n        }\n\n    }\n\n    // UpdateList refreshes the playerlist and replaces it with\n    // the list provided by the server.\n    function UpdateList(result) {\n        this.active.clear()\n        for (let[name,p] of Object.entries(result)) {\n\n            // Create a new player object if it hasn't been added yet.\n            if (!this.list.has(name)) {\n                this.list.set(name, game.classes.Player.New(name))\n            }\n            // Retrieve the player object.\n            let play = this.list.get(name)\n\n            // Update the position values\n            {\n                let {X, Y} = p.CurrentPos\n                play.setPos(X, Y)\n            }\n            {\n                let {X, Y} = p.TargetPos\n                play.setTarget(X, Y)\n            }\n            play.Draw()\n\n            // Add the name to the Active set so we don't delete it.\n            this.active.add(name)\n        }\n        this.Refresh()\n    }\n\n    // check for any names that are no longer active.  Remove them\n    // so they don't continue to appear on the screen.\n    function Refresh() {\n        for (let name of this.list.keys()) {\n            if (this.active.has(name)) {\n                this.active.delete(name)\n            } else {\n                this.list.get(name).canvas.remove()\n                this.list.get(name).chatbox.remove()\n                this.list.delete(name)\n\n            }\n        }\n    }\n\n    // Draws all players based on their current positions.\n    function DrawAll() {\n        for ([name,p] of this.list) {\n            p.Draw()\n        }\n        DrawTargetBox()\n    }\n\n    let targetbox = document.querySelector('#myclickbox')\n\n    function DrawTargetBox() {\n        let {X, Y} = game.player.me().TargetPos\n        let {top, left} = game.camera.getTileTopLeft(X, Y)\n        targetbox.style.top = top + 'px'\n        targetbox.style.left = left + 'px'\n    }\n\n    game.player = {\n        init,\n        UpdateList,\n        Refresh,\n        DrawAll,\n        DrawTargetBox,\n    }\n\n}\n\n// ================================================\n// Class Player\n// ------------------------------------------------\n\n{\n    class Player {\n        constructor(canvas, name) {\n            this.name = name\n            this.canvas = canvas\n            this.ctx = canvas.getContext('2d')\n            this.CurrentPos = {\n                X: 1,\n                Y: 1\n            }\n            this.TargetPos = {\n                X: 1,\n                Y: 1\n            }\n            this.chatbox = new game.chat.ChatBox()\n            this.chatbox.setText(this.name)\n        }\n\n        // NewPlayer creates a new canvas for the player at the specified\n        // location, and attaches it to the document body.  The player\n        // object is returned.\n        static New(name) {\n\n            // Creates a new Canvas.\n            let canvas = document.createElement('canvas')\n            let attr = {\n                width: game.TILE_SIZE,\n                height: game.TILE_SIZE,\n                class: 'player',\n            }\n            for (let[key,val] of Object.entries(attr)) {\n                canvas.setAttribute(key, val)\n            }\n            document.querySelector('#WrapPlayerLayer').appendChild(canvas)\n\n            // Creates the player objects and passes it the new canvas.\n            let p = new Player(canvas,name)\n\n            // Add to the player list.\n            game.player.list.set(name, p)\n\n            // Return a reference to the newly created player.\n            return p\n        }\n\n        // setPos force-moves the player to the exact position specified\n        // by directly changing the position both logically and visually.\n        setPos(X, Y) {\n            this.CurrentPos = {\n                X,\n                Y\n            }\n            this.chatbox.setPos(X, Y)\n        }\n\n        // setTarget simply changes the value of the player's target Position.\n        setTarget(X, Y) {\n            this.TargetPos = {\n                X,\n                Y\n            }\n        }\n\n        // Draw doesn't actually re-draw, but it updates it's location\n        // in the CSS, which effectively redraws it.\n        Draw() {\n            let {X, Y} = this.CurrentPos\n            let top = game.TILE_SIZE * (Y - game.camera.FirstTile.y)\n            let left = game.TILE_SIZE * (X - game.camera.FirstTile.x)\n            this.canvas.style.setProperty('top', `${top}px`)\n            this.canvas.style.setProperty('left', `${left}px`)\n        }\n\n        // moveTo sets the target position of the player, and sends a \n        // websocket message to the server, informing the server that\n        // the player wants to move.\n        moveTo(tx, ty) {\n            ws('move', this.name, tx, ty)\n        }\n\n        // Player.scrollTo centers the camera on the tile that the \n        // player is standing on.\n        scrollTo() {\n            let {X, Y} = this.CurrentPos\n            game.camera.scrollToTile(X, Y)\n        }\n    }\n\n    game.classes.Player = Player\n}\n","// ================================================\n// Tiles\n// ------------------------------------------------\n\n{\n    // in future, tile might hold more data than just this.\n    class Tile {\n        constructor(tx, ty) {\n            this.x = tx\n            this.y = ty\n\n            // holds tiletype for each layer.\n            this.layers = {}\n        }\n\n        isEmpty(layername) {\n            return ((this.layers[layername] === 0) || (this.layers[layername] === undefined))\n        }\n\n        getAtlasLocation(layerName) {\n            let val = this.layers[layerName]\n            return {\n                x: ((val - 1) % game.Atlas.ImageCols) * game.Atlas.TileWidth,\n                y: Math.floor((val - 1) / game.Atlas.ImageCols) * game.Atlas.TileHeight\n            }\n        }\n\n        // TODO: \n        // This probably shouldn't be a method of class Tile,\n        // and should instead be a function in game.drawer\n        draw(ctx, layer, px, py) {\n            if (this.isEmpty(layer)) {\n                return\n            }\n            let s = this.getAtlasLocation(layer)\n            ctx.drawImage(game.AtlasImage, s.x, s.y, game.Atlas.TileWidth, game.Atlas.TileHeight, px, py, game.TILE_SIZE, game.TILE_SIZE)\n        }\n    }\n\n    game.classes.Tile = Tile\n}\n","{\n    // Time Bomb is an event that deletes the given element\n    // after the specified amount of milliseconds.\n    function TimeBomb(element, duration) {\n        window.setTimeout(function() {\n            element.remove()\n        }, duration)\n    }\n\n    // helper function for creating new elements.\n    function MakeElement(ElementType, Attributes, Parent) {\n        let ele = document.createElement(ElementType)\n\n        // Iterate through the attributes and add them.\n        if (Attributes !== undefined) {\n            for (let[key,val] of Object.entries(Attributes)) {\n                ele.setAttribute(key, val)\n            }\n        }\n        // Parent can be either an object or a selector string.\n        if (Parent !== undefined) {\n            switch (typeof (Parent)) {\n            case \"object\":\n                Parent.appendChild(ele)\n            case \"string\":\n                document.querySelector(Parent).appendChild(ele)\n            }\n        }\n        return ele\n    }\n\n    game.toolkit = Object.assign({\n        TimeBomb,\n        MakeElement,\n    }, game.toolkit)\n}\n"]}